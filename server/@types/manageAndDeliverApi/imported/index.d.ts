/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create a new availability */
    post: operations['createAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-user/{identifier}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getServiceUserByCrnOrPrisonerNumber']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/referral/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve a referral */
    get: operations['getReferralDetailsById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/referral-details/{id}/personal-details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve personal details for a referral */
    get: operations['getPersonalDetailsByIdentifier']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/pni-score/{crn}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve PNI Score */
    get: operations['getPniScoreByCrn']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/pages/caselist/{openOrClosed}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all referrals for the case list view */
    get: operations['getCaseListReferrals']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/availability/referral/{referralId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all availabilities for a referral */
    get: operations['getAvailabilityByReferralId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ErrorResponse: {
      /**
       * Format: int32
       * @description The HTTP status code returned by the server
       * @example 404
       */
      status: number
      /**
       * Format: int32
       * @description An application-specific error code
       * @example 404
       */
      errorCode?: number
      /**
       * @description A human readable message for the error
       * @example Referral Not found
       */
      userMessage?: string
      /**
       * @description A developer friendly message for the error
       * @example null
       */
      developerMessage?: string
      /**
       * @description Additional information about the error
       * @example null
       */
      moreInfo?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    Availability: {
      /**
       * Format: uuid
       * @description Unique ID of the availability
       * @example null
       */
      id?: string
      /**
       * Format: uuid
       * @description The ID of the referral
       * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e785
       */
      referralId: string
      /**
       * Format: date-time
       * @description Start date of the availability
       * @example 2025-07-10
       */
      startDate?: string
      /**
       * Format: date-time
       * @description End date of the availability
       * @example 2025-07-20
       */
      endDate?: string
      /**
       * @description Additional details
       * @example Available for remote sessions
       */
      otherDetails?: string
      /**
       * @description User who last modified this record
       * @example admin_user
       */
      lastModifiedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when last modified
       * @example 2025-07-10T12:00:00
       */
      lastModifiedAt?: string
      availabilities: components['schemas']['DailyAvailabilityModel'][]
    }
    DailyAvailabilityModel: {
      /** @enum {string} */
      label: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      slots: components['schemas']['Slot'][]
    }
    Slot: {
      label: string
      value: boolean
    }
    CreateAvailability: {
      /**
       * Format: uuid
       * @description The ID of the referral
       * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e785
       */
      referralId: string
      /**
       * Format: date-time
       * @description Start date of the availability, Start date of the availability, will default to current date if no value is passed in
       * @example 2025-07-10
       */
      startDate?: string
      /**
       * Format: date-time
       * @description End date of the availability
       * @example 2025-07-20
       */
      endDate?: string
      /**
       * @description Additional details
       * @example Available for remote sessions
       */
      otherDetails?: string
      availabilities: components['schemas']['DailyAvailabilityModel'][]
    }
    ServiceUser: {
      name?: string
      crn: string
      /** Format: date */
      dob: string
      gender?: string
      ethnicity?: string
      currentPdu?: string
    }
    Referral: {
      /**
       * Format: uuid
       * @description The unique id of this referral.
       * @example c98151f4-4081-4c65-9f98-54e63a328c8d
       */
      id: string
      /**
       * @description The crn associated with this referral.
       * @example X933590
       */
      crn: string
      /**
       * @description The name of the person associated with this referral.
       * @example John Doe
       */
      personName: string
      /**
       * @description The name of the Intervention for this referral.
       * @example Building Choices
       */
      interventionName: string
      /**
       * Format: date-time
       * @description Timestamp of when this referral was created.
       * @example 11
       */
      createdAt: string
      /**
       * Format: date
       * @description The date of birth of the person being referred.
       * @example 15
       */
      dateOfBirth: string
      /**
       * @description The name of the probation practitioner associated with this referral.
       * @example Tom Saunders
       */
      probationPractitionerName: string
      /**
       * @description The email of the probation practitioner associated with this referral.
       * @example tom.saunders@justice.gov.uk
       */
      probationPractitionerEmail: string
    }
    PersonalDetails: {
      /**
       * @description The crn associated with this referral.
       * @example X933590
       */
      crn: string
      /**
       * @description The full name of the person being referred.
       * @example John Smith
       */
      name: string
      /**
       * Format: date
       * @description The date of birth of the person being referred.
       * @example 15
       */
      dateOfBirth: string
      /**
       * @description The ethnicity of the person being referred.
       * @example White
       */
      ethnicity: string
      /**
       * @description The age of the person being referred.
       * @example 38
       */
      age: string
      /**
       * @description The gender of the person being referred.
       * @example Male
       */
      gender: string
      /**
       * @description The setting where the referral will be delivered.
       * @example Community
       */
      setting: string
      /**
       * @description The probation delivery unit responsible for this referral.
       * @example North London PDU
       */
      probationDeliveryUnit: string
      /**
       * Format: date
       * @description The date this data was fetched from nDelius.
       * @example 1
       */
      dateRetrieved: string
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    ReferralCaseListItem: {
      /** Format: uuid */
      referralId: string
      crn: string
      personName: string
      referralStatus: string
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAvailability: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAvailability']
      }
    }
    responses: {
      /** @description Availability created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Bad input */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getServiceUserByCrnOrPrisonerNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        identifier: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceUser']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceUser']
        }
      }
    }
  }
  updateAvailability: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAvailability']
      }
    }
    responses: {
      /** @description Availability updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Bad input */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAvailability: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAvailability']
      }
    }
    responses: {
      /** @description Availability created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Bad input */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferralDetailsById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id (UUID) of a referral */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about the referral */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferralDetails']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description The request was unauthorised */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The referral does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonalDetailsByIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id (UUID) of a referral */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about the referral */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonalDetails']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description The request was unauthorised */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The referral does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseListReferrals: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable']
        crnOrPersonName?: string
      }
      header?: never
      path: {
        openOrClosed: 'OPEN' | 'CLOSED'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Paged list of all open/closed referrals for a PDU */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferralCaseListItem']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailabilityByReferralId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id (UUID) of a referral */
        referralId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about the availability for a given referral */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Bad input */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Availability']
        }
      }
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
