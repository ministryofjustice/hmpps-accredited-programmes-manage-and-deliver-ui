/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/queue-admin/retry-dlq/{dlqName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["retryDlq"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue-admin/retry-all-dlqs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["retryAllDlqs"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue-admin/purge-queue/{queueName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["purgeQueue"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update availability */
        put: operations["updateAvailability"];
        /** Create a new availability */
        post: operations["createAvailability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risks-and-needs/{crn}/rosh-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ROSH details as held by Oasys */
        get: operations["getRoshAnalysisByCrn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risks-and-needs/{crn}/risks-and-alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Risks details as held by Oasys */
        get: operations["getRisksByCrn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risks-and-needs/{crn}/learning-needs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a person's Learning needs as held in Oasys */
        get: operations["getLearningNeeds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risks-and-needs/{crn}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health details as held by Oasys */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referral-details/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a referral */
        get: operations["getReferralDetailsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referral-details/{id}/sentence-information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve sentence information for a referral */
        get: operations["getSentenceInformationByReferralId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referral-details/{id}/personal-details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve personal details for a referral */
        get: operations["getPersonalDetailsByIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referral-details/{id}/offence-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve offence history for a referral */
        get: operations["getOffenceHistoryByReferralId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue-admin/get-dlq-messages/{dlqName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDlqMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pni-score/{crn}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve PNI Score */
        get: operations["getPniScoreByCrn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pages/caselist/{openOrClosed}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all referrals for the case list view */
        get: operations["getCaseListReferrals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/availability/referral/{referralId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all availabilities for a referral */
        get: operations["getAvailabilityByReferralId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * Format: int32
             * @description The HTTP status code returned by the server
             * @example 404
             */
            status: number;
            /**
             * Format: int32
             * @description An application-specific error code
             * @example 404
             */
            errorCode?: number;
            /**
             * @description A human readable message for the error
             * @example Referral Not found
             */
            userMessage?: string;
            /**
             * @description A developer friendly message for the error
             * @example null
             */
            developerMessage?: string;
            /**
             * @description Additional information about the error
             * @example null
             */
            moreInfo?: string;
        };
        RetryDlqResult: {
            /** Format: int32 */
            messagesFoundCount: number;
        };
        PurgeQueueResult: {
            /** Format: int32 */
            messagesFoundCount: number;
        };
        Availability: {
            /**
             * Format: uuid
             * @description Unique ID of the availability
             * @example null
             */
            id?: string;
            /**
             * Format: uuid
             * @description The ID of the referral
             * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e785
             */
            referralId: string;
            /**
             * @description Start date of the availability
             * @example 2025-07-10
             */
            startDate?: string;
            /**
             * @description End date of the availability
             * @example 2025-07-20
             */
            endDate?: string;
            /**
             * @description Additional details
             * @example Available for remote sessions
             */
            otherDetails?: string;
            /**
             * @description User who last modified this record
             * @example admin_user
             */
            lastModifiedBy?: string;
            /**
             * @description Timestamp when last modified
             * @example 2025-07-10T12:00:00
             */
            lastModifiedAt?: string;
            availabilities: components["schemas"]["DailyAvailabilityModel"][];
        };
        DailyAvailabilityModel: {
            /** @enum {string} */
            label: "Mondays" | "Tuesdays" | "Wednesdays" | "Thursdays" | "Fridays" | "Saturdays" | "Sundays";
            slots: components["schemas"]["Slot"][];
        };
        Slot: {
            label: string;
            value: boolean;
        };
        UpdateAvailability: {
            /**
             * Format: uuid
             * @description The ID of the availability to update
             * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e7893
             */
            availabilityId: string;
            /**
             * Format: uuid
             * @description The ID of the referral
             * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e785
             */
            referralId: string;
            /**
             * @description Start date of the availability, Start date of the availability, will default to current date if no value is passed in
             * @example 2025-07-10
             */
            startDate?: string;
            /**
             * @description End date of the availability
             * @example 2025-07-20
             */
            endDate?: string;
            /**
             * @description Additional details
             * @example Available for remote sessions
             */
            otherDetails?: string;
            availabilities: components["schemas"]["DailyAvailabilityModel"][];
        };
        CreateAvailability: {
            /**
             * Format: uuid
             * @description The ID of the referral
             * @example d3f55f38-7c7b-4b6e-9aa1-e7d7f9e3e785
             */
            referralId: string;
            /**
             * @description Start date of the availability, Start date of the availability, will default to current date if no value is passed in
             * @example 2025-07-10
             */
            startDate?: string;
            /**
             * @description End date of the availability
             * @example 2025-07-20
             */
            endDate?: string;
            /**
             * @description Additional details
             * @example Available for remote sessions
             */
            otherDetails?: string;
            availabilities: components["schemas"]["DailyAvailabilityModel"][];
        };
        RoshAnalysis: {
            /** Format: date */
            assessmentCompleted: string;
            /**
             * @description The details of the current offence.
             * @example Tax evasion
             */
            offenceDetails?: string;
            /**
             * @description The where and when of the current offence.
             * @example At home
             */
            whereAndWhen?: string;
            /**
             * @description How the offence was committed for the current offence.
             * @example false
             */
            howDone?: string;
            /**
             * @description The victims of the current offence.
             * @example hmrc
             */
            whoVictims?: string;
            /**
             * @description Text describing if anyone else was present for the current offence.
             * @example company secretary
             */
            anyoneElsePresent?: string;
            /**
             * @description The motivation for the current offence.
             * @example Greed
             */
            whyDone?: string;
            /**
             * @description The source of this information for the current offence.
             * @example crown court
             */
            sources?: string;
            /**
             * @description Identify behaviours / incidents that evidence the individual’s ability to cause serious harm and when they happened
             * @example Physical assault on cellmate requiring medical attention on 22nd March 2024. Weapon possession (improvised blade) discovered during cell search on 8th February 2024.
             */
            identifyBehavioursIncidents?: string;
            /**
             * @description Provide an analysis of any patterns related to these behaviours / incidents, for example: victims, triggers, locations, impact.
             * @example Escalating violence in evenings when challenged, targeting vulnerable individuals, causing injuries requiring medical attention.
             */
            analysisBehaviourIncidents?: string;
        };
        RiskOfSeriousRecidivism: {
            /**
             * @description Risk of Serious Recidivism score
             * @example 3.45
             */
            scoreLevel?: string;
            /**
             * @description Risk of Serious Recidivism level
             * @example Medium
             * @enum {number}
             */
            percentageScore?: "Low" | "Medium" | "High";
            /**
             * @description Other person(s) at risk - Children
             * @example Low
             */
            ospcScore?: string;
            /**
             * @description Other person(s) at risk - Intimate
             * @example High
             */
            ospiScore?: string;
        };
        Risks: {
            /** Format: date */
            assessmentCompleted: string;
            /** @description Offender Group Reconviction scale */
            offenderGroupReconviction?: components["schemas"]["Score"];
            /** @description Offender Violence Predictor */
            offenderViolencePredictor?: components["schemas"]["Score"];
            /** @description Spousal Assault Risk Assessment */
            sara?: components["schemas"]["Sara"];
            /** @description Risk of Serious Recidivism */
            riskOfSeriousRecidivism?: components["schemas"]["RiskOfSeriousRecidivism"];
            /** @description Risk of Serious Harm */
            riskOfSeriousHarm?: components["schemas"]["RoshSummary"];
            /**
             * @description Active alerts for a person
             * @example ["Domestic Abuse History","MAPPA","Domestic Abuse Victim",]
             */
            alerts?: string[];
            /**
             * Format: date
             * @description The date this data was fetched from nDelius.
             * @example 1
             */
            dateRetrieved: string;
            /**
             * Format: date
             * @description The date this data was fetched from nDelius.
             * @example 1
             */
            lastUpdated: string;
        };
        RoshSummary: {
            /**
             * @description Risk towards prisoners in Custody
             * @example Medium
             * @enum {string}
             */
            riskPrisonersCustody?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards staff in Custody
             * @example Medium
             * @enum {string}
             */
            riskStaffCustody?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards known adult in Custody
             * @example Medium
             * @enum {string}
             */
            riskKnownAdultCustody?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards public in Custody
             * @example Medium
             * @enum {string}
             */
            riskPublicCustody?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards children in Custody
             * @example Medium
             * @enum {string}
             */
            riskChildrenCustody?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards staff in Community
             * @example Medium
             * @enum {string}
             */
            riskStaffCommunity?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards known adults in Community
             * @example Medium
             * @enum {string}
             */
            riskKnownAdultCommunity?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards the public in Community
             * @example Medium
             * @enum {string}
             */
            riskPublicCommunity?: "Low" | "Medium" | "High";
            /**
             * @description Risk towards children in Community
             * @example Medium
             * @enum {string}
             */
            riskChildrenCommunity?: "Low" | "Medium" | "High";
            /**
             * @description Risk of Serious Harm level
             * @example Low
             * @enum {string}
             */
            overallRoshLevel?: "Low" | "Medium" | "High";
        };
        Sara: {
            /**
             * @description The highest of what is being returned based on saraRiskOfViolenceTowardsPartner and saraRiskOfViolenceTowardsOthers
             * @example LOW
             * @enum {string}
             */
            highestRisk?: "NOT_APPLICABLE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH";
            /**
             * @description Risk of violence towards partner
             * @example LOW
             */
            saraRiskOfViolenceTowardsPartner?: string;
            /**
             * @description Risk of violence towards others
             * @example LOW
             */
            saraRiskOfViolenceTowardsOthers?: string;
            /**
             * @description Assessment ID relevant to the SARA version of the assessment
             * @example 2512235167
             */
            assessmentId?: string;
        };
        Score: {
            /**
             * @description One year prediction score
             * @example 0.75
             */
            oneYear?: number;
            /**
             * @description Two year prediction score
             * @example 0.85
             */
            twoYears?: number;
            /**
             * @description Risk level classification
             * @example HIGH
             * @enum {string}
             */
            scoreLevel?: "LOW" | "MEDIUM" | "HIGH";
        };
        LearningNeeds: {
            /** @example Limited recent work history */
            workRelatedSkills?: string;
            /** @example Difficulty with numeracy */
            problemsReadWriteNum?: string;
            /** @example ADHD */
            learningDifficulties?: string;
            /** @example [
             *       "Difficulty with concentration"
             *     ] */
            problemAreas?: string[];
            /** @example NVQ Level 2 */
            qualifications?: string;
            /** @example 3 */
            basicSkillsScore?: string;
            /** @example Issues with ETE engagement */
            eTEIssuesDetails?: string;
        };
        Health: {
            /**
             * @description Does the person have any health condition. Can be Yes, empty or null
             * @example false
             */
            anyHealthConditions?: boolean;
            /**
             * @description Description of the health condition
             * @example Blind in one eye
             */
            description?: string;
        };
        ReferralDetails: {
            /**
             * Format: uuid
             * @description The unique id of this referral.
             * @example c98151f4-4081-4c65-9f98-54e63a328c8d
             */
            id: string;
            /**
             * @description The crn associated with this referral.
             * @example X933590
             */
            crn: string;
            /**
             * @description The name of the person associated with this referral.
             * @example John Doe
             */
            personName: string;
            /**
             * @description The name of the Intervention for this referral.
             * @example Building Choices
             */
            interventionName: string;
            /**
             * Format: date
             * @description Timestamp of when this referral was created.
             * @example 11
             */
            createdAt: string;
            /**
             * Format: date
             * @description The date of birth of the person being referred.
             * @example 15
             */
            dateOfBirth: string;
            /**
             * @description The name of the probation practitioner associated with this referral.
             * @example Tom Saunders
             */
            probationPractitionerName: string;
            /**
             * @description The email of the probation practitioner associated with this referral.
             * @example tom.saunders@justice.gov.uk
             */
            probationPractitionerEmail: string;
            /**
             * @description The offence cohort this referral is classified as.
             * @example SEXUAL_OFFENCE
             * @enum {string}
             */
            cohort: "SEXUAL_OFFENCE" | "GENERAL_OFFENCE";
        };
        CodeDescription: {
            code: string;
            description: string;
        };
        SentenceInformation: {
            /**
             * @description The type of sentence.
             * @example ORA community order
             */
            sentenceType?: string;
            /**
             * @description The release type.
             * @example Released on licence
             */
            releaseType?: string;
            /**
             * @description A list of the licence conditions.
             * @example ['Accredited programme: Building Choices']
             */
            licenceConditions?: components["schemas"]["CodeDescription"][];
            /**
             * Format: date
             * @description The end date of the licence.
             * @example 10
             */
            licenceEndDate?: string;
            /**
             * Format: date
             * @description The start date of the post supervision.
             * @example 10
             */
            postSentenceSupervisionStartDate?: string;
            /**
             * Format: date
             * @description The end date of the post supervision.
             * @example 10
             */
            postSentenceSupervisionEndDate?: string;
            /**
             * Format: date
             * @description The date two thirds of the way to the end of the sentence.
             * @example 10
             */
            twoThirdsPoint?: string;
            /**
             * @description A list of the order requirements.
             * @example ['Accredited programme: Building Choices']
             */
            orderRequirements?: components["schemas"]["CodeDescription"][];
            /**
             * Format: date
             * @description The end date of the order.
             * @example 10
             */
            orderEndDate?: string;
            /**
             * Format: date
             * @description The date this data was fetched from nDelius.
             * @example 1
             */
            dateRetrieved: string;
        };
        PersonalDetails: {
            /**
             * @description The crn associated with this referral.
             * @example X933590
             */
            crn: string;
            /**
             * @description The full name of the person being referred.
             * @example John Smith
             */
            name: string;
            /**
             * Format: date
             * @description The date of birth of the person being referred.
             * @example 15
             */
            dateOfBirth: string;
            /**
             * @description The ethnicity of the person being referred.
             * @example White
             */
            ethnicity: string;
            /**
             * @description The age of the person being referred.
             * @example 38
             */
            age: string;
            /**
             * @description The gender of the person being referred.
             * @example Male
             */
            gender: string;
            /**
             * @description The setting where the referral will be delivered.
             * @example Community
             * @enum {string}
             */
            setting: "COMMUNITY" | "CUSTODY" | "REMAND" | "PRE_RELEASE";
            /**
             * @description The probation delivery unit responsible for this referral.
             * @example North London PDU
             */
            probationDeliveryUnit: string;
            /**
             * Format: date
             * @description The date this data was fetched from nDelius.
             * @example 1
             */
            dateRetrieved: string;
        };
        /** @description Details of an offence committed by an offender */
        Offence: {
            /**
             * Format: date
             * @description The date when the offence was committed
             * @example 11
             */
            offenceDate: string;
            /**
             * @description The description of the offence
             * @example Theft
             */
            offence: string;
            /**
             * @description The code identifying the offence
             * @example 68
             */
            offenceCode: string;
            /**
             * @description The category of the offence
             * @example Theft and burglary offences
             */
            category: string;
            /**
             * @description The code identifying the offence category
             * @example 12
             */
            categoryCode: string;
        };
        /** @description Represents an individual's history of offences, including their main offence and any additional offences */
        OffenceHistory: {
            /** @description The primary offence committed */
            mainOffence: components["schemas"]["Offence"];
            /** @description List of additional or secondary offences */
            additionalOffences: components["schemas"]["Offence"][];
            /**
             * Format: date
             * @description The date the offence history was imported from NDelius
             * @example 11
             */
            importedDate: string;
        };
        DlqMessage: {
            body: {
                [key: string]: unknown;
            };
            messageId: string;
        };
        GetDlqResult: {
            /** Format: int32 */
            messagesFoundCount: number;
            /** Format: int32 */
            messagesReturnedCount: number;
            messages: components["schemas"]["DlqMessage"][];
        };
        /** @description Domain scores from PNI assessment */
        DomainScores: {
            /** @description Sex domain assessment scores */
            SexDomainScore: components["schemas"]["SexDomainScore"];
            /** @description Thinking domain assessment scores */
            ThinkingDomainScore: components["schemas"]["ThinkingDomainScore"];
            /** @description Relationship domain assessment scores */
            RelationshipDomainScore: components["schemas"]["RelationshipDomainScore"];
            /** @description Self-management domain assessment scores */
            SelfManagementDomainScore: components["schemas"]["SelfManagementDomainScore"];
        };
        IndividualCognitiveScores: {
            /**
             * Format: int32
             * @example 2
             */
            proCriminalAttitudes?: number;
            /**
             * Format: int32
             * @example 2
             */
            hostileOrientation?: number;
        };
        IndividualRelationshipScores: {
            /**
             * Format: int32
             * @example 1
             */
            curRelCloseFamily?: number;
            /**
             * Format: int32
             * @example 1
             */
            prevCloseRelationships?: number;
            /**
             * Format: int32
             * @example 1
             */
            easilyInfluenced?: number;
            /**
             * Format: int32
             * @example 1
             */
            aggressiveControllingBehaviour?: number;
        };
        IndividualRiskScores: {
            /**
             * @description The Offender Group Reconviction Scale 3 (OGRS3) risk level
             * @example Medium
             */
            ogrs3Risk?: string;
            /**
             * @description The OVP(OASys Violence Predictor) Risk level
             * @example High
             */
            ovpRisk?: string;
            /**
             * @description ospDc - OASys Sexual Reconviction Predictor Direct Contact
             * @example 0
             */
            ospDc?: string;
            /**
             * @description OASys Sexual Reconviction Predictor Indecent Images of Children
             * @example 1
             */
            ospIic?: string;
            /**
             * @description rsr - Risk of Serious Recidivism
             * @example 5
             */
            rsr?: string;
            /** @description SARA (Spousal Assault Risk Assessment) related risk score */
            sara?: components["schemas"]["Sara"];
        };
        IndividualSelfManagementScores: {
            /**
             * Format: int32
             * @example 2
             */
            impulsivity?: number;
            /**
             * Format: int32
             * @example 1
             */
            temperControl?: number;
            /**
             * Format: int32
             * @example 0
             */
            problemSolvingSkills?: number;
            /** Format: int32 */
            difficultiesCoping?: number;
        };
        IndividualSexScores: {
            /**
             * Format: int32
             * @example 1
             */
            sexualPreOccupation?: number;
            /**
             * Format: int32
             * @example 1
             */
            offenceRelatedSexualInterests?: number;
            /**
             * Format: int32
             * @example 1
             */
            emotionalCongruence?: number;
        };
        /** @description Represents an individual's Programme Needs Identifier (PNI) score assessment */
        PniScore: {
            /**
             * @description The overall intensity level derived from the PNI assessment
             * @example HIGH
             * @enum {string}
             */
            overallIntensity: "HIGH" | "MODERATE" | "ALTERNATIVE_PATHWAY" | "MISSING_INFORMATION";
            /** @description Detailed scores across different assessment domains */
            domainScores: components["schemas"]["DomainScores"];
            /** @example riskScores */
            RiskScore: components["schemas"]["RiskScore"];
            /** @example ['impulsivity is missing '] */
            validationErrors: string[];
        };
        RelationshipDomainScore: {
            /** @enum {string} */
            overallRelationshipDomainLevel?: "HIGH_NEED" | "MEDIUM_NEED" | "LOW_NEED";
            individualRelationshipScores: components["schemas"]["IndividualRelationshipScores"];
        };
        RiskScore: {
            /**
             * @description classification associated with PNI Eg. HIGH_RISK, MEDIUM_RISK, LOW_RISK
             * @example HIGH_RISK
             */
            classification: string;
            /** @example 2 */
            IndividualRiskScores: components["schemas"]["IndividualRiskScores"];
        };
        SelfManagementDomainScore: {
            /** @enum {string} */
            overallSelfManagementDomainLevel?: "HIGH_NEED" | "MEDIUM_NEED" | "LOW_NEED";
            individualSelfManagementScores: components["schemas"]["IndividualSelfManagementScores"];
        };
        SexDomainScore: {
            /**
             * @example 2
             * @enum {string}
             */
            overallSexDomainLevel: "HIGH_NEED" | "MEDIUM_NEED" | "LOW_NEED";
            individualSexScores: components["schemas"]["IndividualSexScores"];
        };
        ThinkingDomainScore: {
            /** @enum {string} */
            overallThinkingDomainLevel?: "HIGH_NEED" | "MEDIUM_NEED" | "LOW_NEED";
            individualThinkingScores: components["schemas"]["IndividualCognitiveScores"];
        };
        ReferralCaseListItem: {
            /** Format: uuid */
            referralId: string;
            crn: string;
            personName: string;
            referralStatus: string;
            /**
             * @description Offence classification based on assessment
             * @enum {string}
             */
            cohort: "SEXUAL_OFFENCE" | "GENERAL_OFFENCE";
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    retryDlq: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dlqName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RetryDlqResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    retryAllDlqs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RetryDlqResult"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    purgeQueue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queueName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PurgeQueueResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAvailability"];
            };
        };
        responses: {
            /** @description Availability updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Bad input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Unauthorised. The request was unauthorised. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAvailability"];
            };
        };
        responses: {
            /** @description Availability created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Bad input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Unauthorised. The request was unauthorised. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRoshAnalysisByCrn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CRN */
                crn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ROSH details held by Oasys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoshAnalysis"];
                };
            };
            /** @description Invalid code format. Expected format for CRN: X718255. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The ROSH information does not exist for the CRN provided. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRisksByCrn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CRN */
                crn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Risk details held by Oasys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Risks"];
                };
            };
            /** @description Invalid code format. Expected format for CRN: X718255. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The risks and needs information does not exist for the CRN provided. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getLearningNeeds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CRN */
                crn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Learning needs held by Oasys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LearningNeeds"];
                };
            };
            /** @description Invalid code format. Expected format for CRN: X718255. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The learning needs information does not exist for the CRN provided. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CRN */
                crn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Health"];
                };
            };
            /** @description Invalid code format. Expected format for CRN: X718255. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The learning needs information does not exist for the CRN provided. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getReferralDetailsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id (UUID) of a referral */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the referral */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralDetails"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The referral does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSentenceInformationByReferralId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id (UUID) of a referral */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the sentence */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SentenceInformation"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The referral does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPersonalDetailsByIdentifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id (UUID) of a referral */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the referral */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonalDetails"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The referral does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getOffenceHistoryByReferralId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id (UUID) of a referral */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the offence history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OffenceHistory"];
                };
            };
            /** @description The offence history could not be retrieved due to missing data on the referral */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this referral. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The offence history for the referral does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDlqMessages: {
        parameters: {
            query?: {
                maxMessages?: number;
            };
            header?: never;
            path: {
                dlqName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetDlqResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPniScoreByCrn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique crn of an individual */
                crn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The PNI Score and associated domain scores for this CRN */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PniScore"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The request was unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden.  The client is not authorised to access this PNI Score. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The PNI Score does not exist for this CRN */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCaseListReferrals: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
                /** @description CRN or persons name */
                crnOrPersonName?: string;
                /** @description Filter by the cohort of the referral Eg: SEXUAL_OFFENCE or GENERAL_OFFENCE */
                cohort?: "SEXUAL_OFFENCE" | "GENERAL_OFFENCE";
                /** @description Filter by the status of the referral */
                status?: string;
            };
            header?: never;
            path: {
                openOrClosed: "OPEN" | "CLOSED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paged list of all open/closed referrals for a PDU */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralCaseListItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAvailabilityByReferralId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id (UUID) of a referral */
                referralId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the availability for a given referral */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Bad input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Availability"];
                };
            };
            /** @description Unauthorised. The request was unauthorised. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
