/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/referral/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve a referral */
    get: operations['getReferralById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/pages/caselist/{openOrClosed}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getOpenCaseListReferrals']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/hello-world': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['helloWorld']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ErrorResponse: {
      /**
       * Format: int32
       * @description The HTTP status code returned by the server
       * @example 404
       */
      status: number
      /**
       * Format: int32
       * @description An application-specific error code
       * @example 404
       */
      errorCode?: number
      /**
       * @description A human readable message for the error
       * @example Referral Not found
       */
      userMessage?: string
      /**
       * @description A developer friendly message for the error
       * @example null
       */
      developerMessage?: string
      /**
       * @description Additional information about the error
       * @example null
       */
      moreInfo?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    Referral: {
      /**
       * Format: uuid
       * @description The unique id of this referral.
       * @example c98151f4-4081-4c65-9f98-54e63a328c8d
       */
      id: string
      /**
       * @description The name of the person associated with this referral.
       * @example John Doe
       */
      personName: string
      /**
       * @description The CRN identifier of the person associated with this referral.
       * @example X12345
       */
      crn: string
      /**
       * Format: date-time
       * @description The date and time that this referral was created.
       * @example 2025-07-09T10:15:30
       */
      createdAt: string
      /**
       * @description The current referral status.
       * @example Created
       */
      status: string
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageReferralCaseListItem: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['ReferralCaseListItem'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
      unpaged?: boolean
    }
    ReferralCaseListItem: {
      /** Format: uuid */
      referralId: string
      crn: string
      personName: string
      referralStatus: string
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferralById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id (UUID) of a referral */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about the referral */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Referral']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description The request was unauthorised */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The referral does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOpenCaseListReferrals: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable']
      }
      header?: never
      path: {
        openOrClosed: 'OPEN' | 'CLOSED'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageReferralCaseListItem']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  helloWorld: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
