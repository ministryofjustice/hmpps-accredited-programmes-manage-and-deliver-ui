name: Pipeline [test -> build -> deploy]

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      additional_docker_tag:
        description: Additional docker tag that can be used to specify stable or testing tags
        required: false
        default: ''
        type: string
      push:
        description: Push docker image to registry flag
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

concurrency:
  # only cancel in progress when on a branch - use SHA on main to ensure uniqueness
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.sha || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # main node build workflow
  node_build:
    name: node build
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/node_build.yml@v2 # WORKFLOW_VERSION
    secrets: inherit
  # generic node unit tests - feel free to override with local tests if required
  node_unit_tests:
    name: node unit tests
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/node_unit_tests.yml@v2 # WORKFLOW_VERSION
    needs: [node_build]
    secrets: inherit
  # generic node integration tests using wiremock - feel free to override with local tests if required
  node_integration_tests:
    name: node integration tests
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/node_integration_tests.yml@v2 # WORKFLOW_VERSION
    needs: [node_build]
    secrets: inherit
  helm_lint:
    strategy:
      matrix:
        environments: ['dev', 'preprod', 'prod']
    name: helm lint
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/test_helm_lint.yml@v2 # WORKFLOW_VERSION
    secrets: inherit
    with:
      environment: ${{ matrix.environments }}
  build:
    name: Build docker image from hmpps-github-actions
    if: github.ref == 'refs/heads/main'
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/docker_build.yml@v2 # WORKFLOW_VERSION
    needs:
      - node_integration_tests
      - node_unit_tests
    with:
      docker_registry: 'ghcr.io'
      registry_org: 'ministryofjustice'
      additional_docker_tag: ${{ inputs.additional_docker_tag }}
      push: ${{ inputs.push || true }}
      docker_multiplatform: false
  deploy_dev:
    name: Deploy to the development environment
    needs:
      - build
      - helm_lint
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2 # WORKFLOW_VERSION
    secrets: inherit
    with:
      environment: 'dev'
      app_version: '${{ needs.build.outputs.app_version }}'
      helm_timeout: '10m'
  deploy_preprod:
    name: Deploy to pre-production environment
    needs:
      - build
      - deploy_dev
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2 # WORKFLOW_VERSION
    secrets: inherit
    with:
      environment: 'preprod'
      app_version: '${{ needs.build.outputs.app_version }}'
  notify_for_prod_approval:
    needs: 
      - build
      - deploy_preprod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get PR information 
        id: pr-info 
        run: |
          # Get the commit SHA from the last commit
          # See https://docs.github.com/en/webhooks/webhook-events-and-payloads#workflow_run
          COMMIT_SHA="${{ github.sha }}"

          # Get the first line of the most recent commit message 
          COMMIT_MESSAGE=$(git log -1 --pretty=%B "$COMMIT_SHA" | head -n 1)
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

          # Use the GitHub CLI to get the PR associated with this commit, its number, title, and author 
          PR_INFO=$(gh pr list --search "$COMMIT_SHA" --json number,title,author --jq '.[0]')
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')

          # The author is the author of the commit 
          PR_AUTHOR="${{ github.actor}}"

          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
        env: 
          GH_TOKEN: ${{ github.token }}
      - name: Map GitHub user to Slack ID 
        id: slack-mapping
        run: |
          # Parse the GitHub to Slack mapping (expecting JSON format)
          GITHUB_USERNAME="${{ github.actor }}"
          USER_MAPPING='${{ vars.GH_TO_SLACK_MAPPING }}'
          
          if [[ "$USER_MAPPING" == "" ]]; then
            echo "Warning: GH_TO_SLACK_MAPPING not configured"
            SLACK_USER_ID="unknown"
          else
            SLACK_USER_ID=$(echo "$USER_MAPPING" | jq -r --arg user "$GITHUB_USERNAME" '.[$user] // "unknown"')
          fi
          
          echo "slack_user_id=$SLACK_USER_ID" >> $GITHUB_OUTPUT
      - name: Generate the Approval link 
        id: approval-link
        run: |
          # Create link to the workflow that needs approval 
          APPROVAL_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "Approval Link: $APPROVAL_LINK"
          echo "approval_link=$APPROVAL_LINK" >> $GITHUB_OUTPUT
      - name: Send Slack notification 
        run: |
          # Prepare the JSON payload
          PAYLOAD=$(jq -n \
            --arg link "${{ steps.approval-link.outputs.approval_link }}" \
            --arg slack_user "${{ steps.slack-mapping.outputs.slack_user_id }}" \
            --arg pr_name "${{ steps.pr-info.outputs.pr_title }}" \
            --arg pr_number "${{ steps.pr-info.outputs.pr_number }}" \
            --arg github_user "${{ github.actor }}" \
            --arg repo "${{ github.repository }}" \
            '{
              link_to_approval_step: $link,
              developer_to_tag_slack_user_id: $slack_user,
              human_readable_pr_name: $pr_name,
              pr_number: $pr_number,
              github_username: $github_user,
              repository: $repo,
              timestamp: now
            }')
          
          # Send the webhook request
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.SLACK_WEBHOOK_URL }}" \
            --fail \
            --show-error \
            --silent
            
          if [[ $? -eq 0 ]]; then
            echo "✅ Slack notification sent successfully"
          else
            echo "❌ Failed to send Slack notification"
            echo "Please check the GH_TO_SLACK_MAPPING variable for user "${{ github.actor }}" and SLACK_WEBHOOK_URL secret."
            exit 1
          fi
  deploy_prod:
    name: Deploy to production environment
    needs:
      - build
      - deploy_preprod
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2 # WORKFLOW_VERSION
    secrets: inherit
    with:
      environment: 'prod'
      app_version: '${{ needs.build.outputs.app_version }}'
